#!/usr/bin/env python
#
#  ImageJFind, a Diamond filter for interoperating with ImageJ
#
#  Copyright (c) 2011 Carnegie Mellon University
#  All rights reserved.
#
#  This software is distributed under the terms of the Eclipse Public
#  License, Version 1.0 which can be found in the file named LICENSE.
#  ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
#  RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
#

import os
from opendiamond.bundle import make_zipfile
from optparse import OptionParser
import sys

if __name__ == '__main__':
    parser = OptionParser(
        usage='%prog [-h] [options] macro-file [supporting-files...]',
        description='Package a Diamond filter written in ImageJ into an OpenDiamond filter bundle.',
    )
    parser.add_option('-o', dest='outfile', metavar='outfile',
            help='path to output file')
    parser.add_option('-n', dest='name', metavar='display-name',
            default='ImageJ Filter',
            help='display name for filter')
    opts, args = parser.parse_args()
    if len(args) < 1:
        parser.error('no macro file specified')
    macro_file = args[0]
    macro = os.path.basename(macro_file)
    outfile = opts.outfile
    if outfile is None:
        outfile = os.path.splitext(macro_file)[0] + '.zip'
    files = dict([(os.path.basename(f), f) for f in args])

    manifest = {
        'Plugin': 'ImageJ',
        'Name': opts.name,
        'Macro': macro,
    }
    manifest = ''.join(['%s: %s\n' % (k, v) for k, v in manifest.items()])

    try:
        make_zipfile(outfile, manifest, files)
    except Exception, e:
        parser.error(str(e))
